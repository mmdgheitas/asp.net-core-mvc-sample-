// <auto-generated />
using System;
using DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(DB))]
    [Migration("20240110024454_createBase")]
    partial class createBase
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.26")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("be.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ItemsId")
                        .HasColumnType("int");

                    b.Property<int?>("Items_deleteId")
                        .HasColumnType("int");

                    b.Property<int>("count")
                        .HasColumnType("int");

                    b.Property<DateTime>("createTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("updateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("usersId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ItemsId");

                    b.HasIndex("Items_deleteId");

                    b.HasIndex("usersId");

                    b.ToTable("Cart");
                });

            modelBuilder.Entity("be.Cart_delete", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ItemsId")
                        .HasColumnType("int");

                    b.Property<int>("count")
                        .HasColumnType("int");

                    b.Property<DateTime>("createTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("updateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("usersId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ItemsId");

                    b.HasIndex("usersId");

                    b.ToTable("CartDelete");
                });

            modelBuilder.Entity("be.codeTakhfif", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<string>("code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("create_time")
                        .HasColumnType("datetime2");

                    b.Property<int?>("itemsId")
                        .HasColumnType("int");

                    b.Property<DateTime>("update_time")
                        .HasColumnType("datetime2");

                    b.Property<string>("usersId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("id");

                    b.HasIndex("itemsId");

                    b.HasIndex("usersId");

                    b.ToTable("codeTakhfif");
                });

            modelBuilder.Entity("be.codeTakhfif_delete", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<string>("code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("create_time")
                        .HasColumnType("datetime2");

                    b.Property<int?>("itemsId")
                        .HasColumnType("int");

                    b.Property<DateTime>("update_time")
                        .HasColumnType("datetime2");

                    b.Property<string>("usersId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("id");

                    b.HasIndex("itemsId");

                    b.HasIndex("usersId");

                    b.ToTable("codeTakhfifDelete");
                });

            modelBuilder.Entity("be.index", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<string>("banner1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("banner2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("banner3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("create_date")
                        .HasColumnType("datetime2");

                    b.Property<string>("footer1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("footer2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("src_banner1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("src_banner2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("src_banner3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("src_footer1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("src_footer2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("update_date")
                        .HasColumnType("datetime2");

                    b.Property<string>("userId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("vec1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("vec2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("vec3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("vec4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("vec5")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("vec6")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("userId")
                        .IsUnique()
                        .HasFilter("[userId] IS NOT NULL");

                    b.ToTable("index");
                });

            modelBuilder.Entity("be.Items", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("brand")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("code_mahsoul")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("createTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("detail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("detail_2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("exist")
                        .HasColumnType("bit");

                    b.Property<int>("fieInBox")
                        .HasColumnType("int");

                    b.Property<string>("img_src")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("percent")
                        .HasColumnType("int");

                    b.Property<int>("pris")
                        .HasColumnType("int");

                    b.Property<string>("sellerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("size")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("updateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("userId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("warranty")
                        .HasColumnType("bit");

                    b.Property<int>("warrantyTime")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("items");
                });

            modelBuilder.Entity("be.Items_delete", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("brand")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("code_mahsoul")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("createTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("detail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("exist")
                        .HasColumnType("bit");

                    b.Property<int>("fieInBox")
                        .HasColumnType("int");

                    b.Property<string>("img_src")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("percent")
                        .HasColumnType("int");

                    b.Property<int>("pris")
                        .HasColumnType("int");

                    b.Property<string>("sellerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("updateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("userId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("warranty")
                        .HasColumnType("bit");

                    b.Property<int>("warrantyTime")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("itemsDelete");
                });

            modelBuilder.Entity("be.Likes", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<int?>("Items_deleteId")
                        .HasColumnType("int");

                    b.Property<DateTime>("createTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("item")
                        .HasColumnType("int");

                    b.Property<DateTime>("updateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("user")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("usersId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("id");

                    b.HasIndex("Items_deleteId");

                    b.HasIndex("item");

                    b.HasIndex("usersId");

                    b.ToTable("likes");
                });

            modelBuilder.Entity("be.Likes_delete", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<DateTime>("createTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("item")
                        .HasColumnType("int");

                    b.Property<DateTime>("updateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("user")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("usersId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("id");

                    b.HasIndex("item");

                    b.HasIndex("usersId");

                    b.ToTable("likesDelete");
                });

            modelBuilder.Entity("be.Notification", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<string>("content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("create_time")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("update_time")
                        .HasColumnType("datetime2");

                    b.Property<string>("usersId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("id");

                    b.HasIndex("usersId");

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("be.Notification_delete", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<string>("content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("create_time")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("update_time")
                        .HasColumnType("datetime2");

                    b.Property<string>("usersId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("id");

                    b.HasIndex("usersId");

                    b.ToTable("NotificationDelete");
                });

            modelBuilder.Entity("be.Sold", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<string>("FactorId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("code_posti")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("createTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("customerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("detail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("id_get")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("itemsId")
                        .HasColumnType("int");

                    b.Property<bool>("pay")
                        .HasColumnType("bit");

                    b.Property<int>("price")
                        .HasColumnType("int");

                    b.Property<string>("seller_idId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("size")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.Property<int>("tedad")
                        .HasColumnType("int");

                    b.Property<string>("trans_id")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("updateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.HasIndex("customerId");

                    b.HasIndex("itemsId");

                    b.HasIndex("seller_idId");

                    b.ToTable("solds");
                });

            modelBuilder.Entity("be.Sold_delete", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<string>("FactorId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("code_mahsoul")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("code_posti")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("createTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("customerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("detail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("id_get")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("pay")
                        .HasColumnType("bit");

                    b.Property<int>("price")
                        .HasColumnType("int");

                    b.Property<string>("seller_idId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("size")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("tedad")
                        .HasColumnType("int");

                    b.Property<string>("trans_id")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("updateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.HasIndex("customerId");

                    b.HasIndex("seller_idId");

                    b.ToTable("soldsDelete");
                });

            modelBuilder.Entity("be.user", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("code_melli")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("createTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("family")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("mobile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("pass")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("post")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("seller")
                        .HasColumnType("bit");

                    b.Property<string>("seller_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("sells")
                        .HasColumnType("int");

                    b.Property<string>("shomare_cart")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("updateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("be.Votes", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<int>("ItemsId")
                        .HasColumnType("int");

                    b.Property<int?>("Items_deleteId")
                        .HasColumnType("int");

                    b.Property<bool>("admin")
                        .HasColumnType("bit");

                    b.Property<DateTime>("createTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("ok")
                        .HasColumnType("bit");

                    b.Property<bool>("seen")
                        .HasColumnType("bit");

                    b.Property<string>("text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("updateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("userId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("votesId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("ItemsId");

                    b.HasIndex("Items_deleteId");

                    b.HasIndex("userId");

                    b.ToTable("votes");
                });

            modelBuilder.Entity("be.Votes_delete", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<int>("ItemsId")
                        .HasColumnType("int");

                    b.Property<bool>("admin")
                        .HasColumnType("bit");

                    b.Property<DateTime>("createTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("ok")
                        .HasColumnType("bit");

                    b.Property<string>("text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("updateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("userId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("votesId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("ItemsId");

                    b.HasIndex("userId");

                    b.ToTable("votesDelete");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("be.Cart", b =>
                {
                    b.HasOne("be.Items", "items")
                        .WithMany("cart")
                        .HasForeignKey("ItemsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("be.Items_delete", null)
                        .WithMany("cart")
                        .HasForeignKey("Items_deleteId");

                    b.HasOne("be.user", "users")
                        .WithMany("cart")
                        .HasForeignKey("usersId");

                    b.Navigation("items");

                    b.Navigation("users");
                });

            modelBuilder.Entity("be.Cart_delete", b =>
                {
                    b.HasOne("be.Items", "items")
                        .WithMany()
                        .HasForeignKey("ItemsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("be.user", "users")
                        .WithMany()
                        .HasForeignKey("usersId");

                    b.Navigation("items");

                    b.Navigation("users");
                });

            modelBuilder.Entity("be.codeTakhfif", b =>
                {
                    b.HasOne("be.Items", "items")
                        .WithMany()
                        .HasForeignKey("itemsId");

                    b.HasOne("be.user", "users")
                        .WithMany()
                        .HasForeignKey("usersId");

                    b.Navigation("items");

                    b.Navigation("users");
                });

            modelBuilder.Entity("be.codeTakhfif_delete", b =>
                {
                    b.HasOne("be.Items", "items")
                        .WithMany()
                        .HasForeignKey("itemsId");

                    b.HasOne("be.user", "users")
                        .WithMany()
                        .HasForeignKey("usersId");

                    b.Navigation("items");

                    b.Navigation("users");
                });

            modelBuilder.Entity("be.index", b =>
                {
                    b.HasOne("be.user", "user")
                        .WithOne("Index")
                        .HasForeignKey("be.index", "userId");

                    b.Navigation("user");
                });

            modelBuilder.Entity("be.Likes", b =>
                {
                    b.HasOne("be.Items_delete", null)
                        .WithMany("likes")
                        .HasForeignKey("Items_deleteId");

                    b.HasOne("be.Items", "Items")
                        .WithMany("likes")
                        .HasForeignKey("item")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("be.user", "users")
                        .WithMany("likes")
                        .HasForeignKey("usersId");

                    b.Navigation("Items");

                    b.Navigation("users");
                });

            modelBuilder.Entity("be.Likes_delete", b =>
                {
                    b.HasOne("be.Items", "Items")
                        .WithMany()
                        .HasForeignKey("item")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("be.user", "users")
                        .WithMany()
                        .HasForeignKey("usersId");

                    b.Navigation("Items");

                    b.Navigation("users");
                });

            modelBuilder.Entity("be.Notification", b =>
                {
                    b.HasOne("be.user", "users")
                        .WithMany()
                        .HasForeignKey("usersId");

                    b.Navigation("users");
                });

            modelBuilder.Entity("be.Notification_delete", b =>
                {
                    b.HasOne("be.user", "users")
                        .WithMany()
                        .HasForeignKey("usersId");

                    b.Navigation("users");
                });

            modelBuilder.Entity("be.Sold", b =>
                {
                    b.HasOne("be.user", "customer")
                        .WithMany()
                        .HasForeignKey("customerId");

                    b.HasOne("be.Items", "items")
                        .WithMany()
                        .HasForeignKey("itemsId");

                    b.HasOne("be.user", "seller_id")
                        .WithMany()
                        .HasForeignKey("seller_idId");

                    b.Navigation("customer");

                    b.Navigation("items");

                    b.Navigation("seller_id");
                });

            modelBuilder.Entity("be.Sold_delete", b =>
                {
                    b.HasOne("be.user", "customer")
                        .WithMany()
                        .HasForeignKey("customerId");

                    b.HasOne("be.user", "seller_id")
                        .WithMany()
                        .HasForeignKey("seller_idId");

                    b.Navigation("customer");

                    b.Navigation("seller_id");
                });

            modelBuilder.Entity("be.Votes", b =>
                {
                    b.HasOne("be.Items", "Items")
                        .WithMany("votes")
                        .HasForeignKey("ItemsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("be.Items_delete", null)
                        .WithMany("votes")
                        .HasForeignKey("Items_deleteId");

                    b.HasOne("be.user", "user")
                        .WithMany("votes")
                        .HasForeignKey("userId");

                    b.Navigation("Items");

                    b.Navigation("user");
                });

            modelBuilder.Entity("be.Votes_delete", b =>
                {
                    b.HasOne("be.Items", "Items")
                        .WithMany()
                        .HasForeignKey("ItemsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("be.user", "user")
                        .WithMany()
                        .HasForeignKey("userId");

                    b.Navigation("Items");

                    b.Navigation("user");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("be.user", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("be.user", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("be.user", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("be.user", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("be.Items", b =>
                {
                    b.Navigation("cart");

                    b.Navigation("likes");

                    b.Navigation("votes");
                });

            modelBuilder.Entity("be.Items_delete", b =>
                {
                    b.Navigation("cart");

                    b.Navigation("likes");

                    b.Navigation("votes");
                });

            modelBuilder.Entity("be.user", b =>
                {
                    b.Navigation("Index");

                    b.Navigation("cart");

                    b.Navigation("likes");

                    b.Navigation("votes");
                });
#pragma warning restore 612, 618
        }
    }
}
